// Generated by CoffeeScript 1.8.0
(function() {
  var IDENTIFIER, PREFIX_LISTENERS, addListener, emit, exports, findOrCreateListenerTable, once, removeAllListeners, removeListener,
    __slice = [].slice;

  IDENTIFIER = "__event_emitter";

  PREFIX_LISTENERS = "__listeners_";

  findOrCreateListenerTable = function(event) {
    var keyEvent;
    keyEvent = "" + PREFIX_LISTENERS + event;
    if (this[keyEvent] == null) {
      this[keyEvent] = [];
    }
    return this[keyEvent];
  };

  addListener = function(event, listener) {
    var listeners;
    if (!((event != null) && (listener != null))) {
      console.error("ERROR [events::addListener] invalid event:" + event + " or listener:" + listener + ", self:" + this);
      return;
    }
    if (this[IDENTIFIER] !== true) {
      console.error("ERROR [events::addListener] self is not valid EventEmitter");
      return;
    }
    listeners = findOrCreateListenerTable.call(this, event);
    if (listeners.indexOf(listener) < 0) {
      listeners.push(listener);
    } else {
      console.warn("[events::addListener] same listener:" + listener + " for event:" + event + " already exist");
    }
    return this;
  };

  once = function(event, listener) {
    var listeners;
    if (!((event != null) && (listener != null))) {
      console.error("ERROR [events::once] invalid event:" + event + " or listener:" + listener + ", self:" + this);
      return;
    }
    if (this[IDENTIFIER] !== true) {
      console.error("ERROR [events::once] self is not valid EventEmitter");
      return;
    }
    event = "" + event + ":once";
    listeners = findOrCreateListenerTable.call(this, event);
    if (listeners.indexOf(listener) < 0) {
      listeners.push(listener);
    } else {
      console.warn("[events::once] same listener:" + listener + " for event:" + event + " already exist");
    }
    return this;
  };

  removeListener = function(event, listener) {
    var listeners, pos;
    if (!((event != null) && (listener != null))) {
      console.error("ERROR [events::removeListener] invalid event:" + event + " or listener:" + listener + ", self:" + this);
      return;
    }
    if (this[IDENTIFIER] !== true) {
      console.error("ERROR [events::removeListener] self is not valid EventEmitter");
      return;
    }
    listeners = this["" + PREFIX_LISTENERS + event];
    if (Array.isArray(listeners)) {
      pos = listeners.indexOf(listener);
      if (~pos) {
        listeners.splice(pos, 1);
      }
    }
    listeners = this["" + PREFIX_LISTENERS + event + ":once"];
    if (Array.isArray(listeners)) {
      pos = listeners.indexOf(listener);
      if (~pos) {
        listeners.splice(pos, 1);
      }
    }
    return this;
  };

  removeAllListeners = function(event) {
    var key, listToRemove, _i, _len;
    console.log("[events::removeAllListeners] self:" + this + ", event:" + event);
    if (this[IDENTIFIER] !== true) {
      console.error("ERROR [events::removeAllListeners] self is not valid EventEmitter");
      return;
    }
    if (event != null) {
      delete this["" + PREFIX_LISTENERS + event];
      delete this["" + PREFIX_LISTENERS + event + ":once"];
    } else {
      listToRemove = [];
      for (key in this) {
        if (key.indexOf(PREFIX_LISTENERS) === 0) {
          listToRemove.push(key);
        }
      }
      for (_i = 0, _len = listToRemove.length; _i < _len; _i++) {
        key = listToRemove[_i];
        delete this[key];
      }
    }
    return this;
  };

  emit = function() {
    var args, err, event, keyEvent, listener, listeners, _i, _j, _len, _len1;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (event == null) {
      console.error("ERROR [events::once] invalid event:" + event);
      return;
    }
    if (this[IDENTIFIER] !== true) {
      console.error("ERROR [events::emit] self is not valid EventEmitter");
      return;
    }
    listeners = this["" + PREFIX_LISTENERS + event];
    if (Array.isArray(listeners)) {
      for (_i = 0, _len = listeners.length; _i < _len; _i++) {
        listener = listeners[_i];
        listener.apply(null, args);
      }
    }
    keyEvent = "" + PREFIX_LISTENERS + event + ":once";
    listeners = this[keyEvent];
    if (Array.isArray(listeners)) {
      for (_j = 0, _len1 = listeners.length; _j < _len1; _j++) {
        listener = listeners[_j];
        try {
          listener.apply(null, args);
        } catch (_error) {
          err = _error;
          console.log("[events::" + this + "::emit] err:" + err);
        }
      }
      delete this[keyEvent];
    }
    return this;
  };

  exports = {
    EventEmitter: function(tbl) {
      tbl || (tbl = {});
      if (tbl[IDENTIFIER] != null) {
        console.log("[events::EventEmitter] " + tbl + " is already an EventEmitter");
        return tbl;
      }
      tbl[IDENTIFIER] = true;
      tbl.on = addListener;
      tbl.addListener = addListener;
      tbl.once = once;
      tbl.off = removeListener;
      tbl.removeListener = removeListener;
      tbl.removeAllListeners = removeAllListeners;
      tbl.emit = emit;
      return tbl;
    }
  };

  regRequire("events", exports);

  return exports;

}).call(this);
